//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""KeayboardAndMouse"",
            ""id"": ""ac6a5113-7e45-4480-8c53-832ad53fe6b6"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""917a5959-b091-401e-9bc5-8d9f18708cc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""84b4f020-84a4-4dfe-91a5-5406a9d96949"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IsAiming"",
                    ""type"": ""Value"",
                    ""id"": ""56b48373-ed22-4e25-859f-5524a343fe02"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PoinerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""8920dc7f-9ca2-4dcd-9d3d-11e687468a4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a4ce72d5-753b-45dd-8a23-f739e145bcb2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""258b1641-c6ab-4d51-9459-fea93ba06775"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e641da7f-600f-4846-a568-706f08ff9156"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7491972b-41f4-4d0f-93e6-27dc988ccebe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""495f040e-d935-4e14-822d-4a6e51a836af"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0f9c4074-7714-480a-973f-a41847d21303"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5166b89b-b3d1-4481-8b09-4738946724c3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""IsAiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12d71547-4cbb-45f1-a1d7-b2b219145098"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""PoinerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Main"",
            ""bindingGroup"": ""Main"",
            ""devices"": []
        }
    ]
}");
        // KeayboardAndMouse
        m_KeayboardAndMouse = asset.FindActionMap("KeayboardAndMouse", throwIfNotFound: true);
        m_KeayboardAndMouse_Movement = m_KeayboardAndMouse.FindAction("Movement", throwIfNotFound: true);
        m_KeayboardAndMouse_Attack = m_KeayboardAndMouse.FindAction("Attack", throwIfNotFound: true);
        m_KeayboardAndMouse_IsAiming = m_KeayboardAndMouse.FindAction("IsAiming", throwIfNotFound: true);
        m_KeayboardAndMouse_PoinerPosition = m_KeayboardAndMouse.FindAction("PoinerPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeayboardAndMouse
    private readonly InputActionMap m_KeayboardAndMouse;
    private List<IKeayboardAndMouseActions> m_KeayboardAndMouseActionsCallbackInterfaces = new List<IKeayboardAndMouseActions>();
    private readonly InputAction m_KeayboardAndMouse_Movement;
    private readonly InputAction m_KeayboardAndMouse_Attack;
    private readonly InputAction m_KeayboardAndMouse_IsAiming;
    private readonly InputAction m_KeayboardAndMouse_PoinerPosition;
    public struct KeayboardAndMouseActions
    {
        private @InputActions m_Wrapper;
        public KeayboardAndMouseActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_KeayboardAndMouse_Movement;
        public InputAction @Attack => m_Wrapper.m_KeayboardAndMouse_Attack;
        public InputAction @IsAiming => m_Wrapper.m_KeayboardAndMouse_IsAiming;
        public InputAction @PoinerPosition => m_Wrapper.m_KeayboardAndMouse_PoinerPosition;
        public InputActionMap Get() { return m_Wrapper.m_KeayboardAndMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeayboardAndMouseActions set) { return set.Get(); }
        public void AddCallbacks(IKeayboardAndMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_KeayboardAndMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeayboardAndMouseActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @IsAiming.started += instance.OnIsAiming;
            @IsAiming.performed += instance.OnIsAiming;
            @IsAiming.canceled += instance.OnIsAiming;
            @PoinerPosition.started += instance.OnPoinerPosition;
            @PoinerPosition.performed += instance.OnPoinerPosition;
            @PoinerPosition.canceled += instance.OnPoinerPosition;
        }

        private void UnregisterCallbacks(IKeayboardAndMouseActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @IsAiming.started -= instance.OnIsAiming;
            @IsAiming.performed -= instance.OnIsAiming;
            @IsAiming.canceled -= instance.OnIsAiming;
            @PoinerPosition.started -= instance.OnPoinerPosition;
            @PoinerPosition.performed -= instance.OnPoinerPosition;
            @PoinerPosition.canceled -= instance.OnPoinerPosition;
        }

        public void RemoveCallbacks(IKeayboardAndMouseActions instance)
        {
            if (m_Wrapper.m_KeayboardAndMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeayboardAndMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_KeayboardAndMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeayboardAndMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeayboardAndMouseActions @KeayboardAndMouse => new KeayboardAndMouseActions(this);
    private int m_MainSchemeIndex = -1;
    public InputControlScheme MainScheme
    {
        get
        {
            if (m_MainSchemeIndex == -1) m_MainSchemeIndex = asset.FindControlSchemeIndex("Main");
            return asset.controlSchemes[m_MainSchemeIndex];
        }
    }
    public interface IKeayboardAndMouseActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnIsAiming(InputAction.CallbackContext context);
        void OnPoinerPosition(InputAction.CallbackContext context);
    }
}
